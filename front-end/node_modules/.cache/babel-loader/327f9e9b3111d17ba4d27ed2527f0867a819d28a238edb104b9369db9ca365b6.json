{"ast":null,"code":"export const createIsSupportedPromise = window => {\n  if (window !== null &&\n  // Bug #14: Before v14.1 Safari did not support the BlobEvent.\n  window.BlobEvent !== undefined && window.MediaStream !== undefined && (\n  /*\n   * Bug #10: An early experimental implemenation in Safari did not provide the isTypeSupported() function.\n   */\n  window.MediaRecorder === undefined || window.MediaRecorder.isTypeSupported !== undefined)) {\n    /*\n     * Bug #5: Up until v70 Firefox did emit a blob of type video/webm when asked to encode a MediaStream with a video track into an\n     * audio codec.\n     */\n    return new Promise(resolve => {\n      // Bug #11 Safari does not yet support the MediaRecorder but that isn't tested here.\n      if (window.MediaRecorder === undefined) {\n        return resolve(true);\n      }\n      const canvasElement = window.document.createElement('canvas');\n      // @todo https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n      canvasElement.getContext('2d');\n      if (typeof canvasElement.captureStream !== 'function') {\n        return resolve(false);\n      }\n      const mediaStream = canvasElement.captureStream();\n      const mimeType = 'audio/webm';\n      try {\n        const mediaRecorder = new window.MediaRecorder(mediaStream, {\n          mimeType\n        });\n        mediaRecorder.addEventListener('dataavailable', _ref => {\n          let {\n            data\n          } = _ref;\n          return resolve(data.type === mimeType);\n        });\n        mediaRecorder.start();\n        setTimeout(() => mediaRecorder.stop(), 10);\n      } catch (err) {\n        resolve(err.name === 'NotSupportedError');\n      }\n    });\n  }\n  return Promise.resolve(false);\n};","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,wBAAwB,GAAgCC,MAAM,IAAI;EAC3E,IACIA,MAAM,KAAK,IAAI;EACf;EACAA,MAAM,CAACC,SAAS,KAAKC,SAAS,IAC9BF,MAAM,CAACG,WAAW,KAAKD,SAAS;EAChC;;;EAGCF,MAAM,CAACI,aAAa,KAAKF,SAAS,IAAIF,MAAM,CAACI,aAAa,CAACC,eAAe,KAAKH,SAAS,CAAC,EAC5F;IACE;;;;IAIA,OAAO,IAAII,OAAO,CAAEC,OAAO,IAAI;MAC3B;MACA,IAAIP,MAAM,CAACI,aAAa,KAAKF,SAAS,EAAE;QACpC,OAAOK,OAAO,CAAC,IAAI,CAAC;;MAGxB,MAAMC,aAAa,GAA0DR,MAAM,CAACS,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAEpH;MACAF,aAAa,CAACG,UAAU,CAAC,IAAI,CAAC;MAE9B,IAAI,OAAOH,aAAa,CAACI,aAAa,KAAK,UAAU,EAAE;QACnD,OAAOL,OAAO,CAAC,KAAK,CAAC;;MAGzB,MAAMM,WAAW,GAAGL,aAAa,CAACI,aAAa,EAAE;MACjD,MAAME,QAAQ,GAAG,YAAY;MAE7B,IAAI;QACA,MAAMC,aAAa,GAAG,IAAIf,MAAM,CAACI,aAAa,CAACS,WAAW,EAAE;UAAEC;QAAQ,CAAE,CAAC;QAEzEC,aAAa,CAACC,gBAAgB,CAAC,eAAe,EAAE;UAAA,IAAC;YAAEC;UAAI,CAAE;UAAA,OAAKV,OAAO,CAACU,IAAI,CAACC,IAAI,KAAKJ,QAAQ,CAAC;QAAA,EAAC;QAC9FC,aAAa,CAACI,KAAK,EAAE;QAErBC,UAAU,CAAC,MAAML,aAAa,CAACM,IAAI,EAAE,EAAE,EAAE,CAAC;OAC7C,CAAC,OAAOC,GAAG,EAAE;QACVf,OAAO,CAACe,GAAG,CAACC,IAAI,KAAK,mBAAmB,CAAC;;IAEjD,CAAC,CAAC;;EAGN,OAAOjB,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;AACjC,CAAC","names":["createIsSupportedPromise","window","BlobEvent","undefined","MediaStream","MediaRecorder","isTypeSupported","Promise","resolve","canvasElement","document","createElement","getContext","captureStream","mediaStream","mimeType","mediaRecorder","addEventListener","data","type","start","setTimeout","stop","err","name"],"sources":["D:\\Nam_4\\Do-an-tot-nghiep\\AIChat\\front-end\\node_modules\\extendable-media-recorder\\src\\factories\\is-supported-promise.ts"],"sourcesContent":["import { TIsSupportedPromiseFactory } from '../types';\n\nexport const createIsSupportedPromise: TIsSupportedPromiseFactory = (window) => {\n    if (\n        window !== null &&\n        // Bug #14: Before v14.1 Safari did not support the BlobEvent.\n        window.BlobEvent !== undefined &&\n        window.MediaStream !== undefined &&\n        /*\n         * Bug #10: An early experimental implemenation in Safari did not provide the isTypeSupported() function.\n         */\n        (window.MediaRecorder === undefined || window.MediaRecorder.isTypeSupported !== undefined)\n    ) {\n        /*\n         * Bug #5: Up until v70 Firefox did emit a blob of type video/webm when asked to encode a MediaStream with a video track into an\n         * audio codec.\n         */\n        return new Promise((resolve) => {\n            // Bug #11 Safari does not yet support the MediaRecorder but that isn't tested here.\n            if (window.MediaRecorder === undefined) {\n                return resolve(true);\n            }\n\n            const canvasElement: HTMLCanvasElement & { captureStream?(): MediaStream } = window.document.createElement('canvas');\n\n            // @todo https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n            canvasElement.getContext('2d');\n\n            if (typeof canvasElement.captureStream !== 'function') {\n                return resolve(false);\n            }\n\n            const mediaStream = canvasElement.captureStream();\n            const mimeType = 'audio/webm';\n\n            try {\n                const mediaRecorder = new window.MediaRecorder(mediaStream, { mimeType });\n\n                mediaRecorder.addEventListener('dataavailable', ({ data }) => resolve(data.type === mimeType));\n                mediaRecorder.start();\n\n                setTimeout(() => mediaRecorder.stop(), 10);\n            } catch (err) {\n                resolve(err.name === 'NotSupportedError');\n            }\n        });\n    }\n\n    return Promise.resolve(false);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}